# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet propprism "properties using Prism" b
private ${1:int} ${2:value};
public $1 ${3:Value}
{
	get => return this.$2;
	set => this.SetProperty(ref this.$2, value);
}
endsnippet
snippet propprismr "properties using Prism" b
private ${1:int} ${2:value};
public $1 ${3:Value}
{
	get => return this.$2;
	set
	{
		this.SetProperty(ref this.$2, value);
		this.ExecuteCommand.RaiseCanExecuteChanged();
	}
}
endsnippet

snippet propr "properties using ReactiveProperty" b
${1:public} ReactiveProperty<${2:int}> ${3:Name} { get; }
endsnippet

snippet proprs "properties using ReactivePropertySlim" b
${1:public} ReactivePropertySlim<${2:int}> ${3:Name} { get; }
endsnippet

snippet prismapp "entry point of prism application" b
using Prism.Ioc;
using Prism.Mvvm;
using Prism.Unity;
using System;
using System.Reflection;
using System.Windows;

namespace ${1:Application}
{
	/// <summary>
	/// Interaction logic for App.xaml
	/// </summary>
	public partial class App : PrismApplication
	{
		protected override Window CreateShell()
			=> this.Container.Resolve<${2:Views}.MainWindow>();

		protected override void RegisterTypes(IContainerRegistry containerRegistry) { }

		// "...Views.hogehoge.xaml" という View の View Model を "...ViewModels.hogehoge.cs" に自動で設定する
		protected override void ConfigureViewModelLocator()
		{
			base.ConfigureViewModelLocator();

			ViewModelLocationProvider.
				SetDefaultViewTypeToViewModelTypeResolver((viewType) =>
			{
				// "...Views.MainWindow" を "...ViewModels.MainWindow" に置き換える
				string viewName = viewType.FullName.Replace(".Views.",".ViewModels.");
				string viewAssemblyName = viewType.GetTypeInfo().Assembly.FullName;
				string viewModelName = $"{viewName}, {viewAssemblyName}";
				return Type.GetType(viewModelName);
			});
		}
	}
}
endsnippet

snippet prismview ".cs code for xaml view" b
using System.Windows;

namespace ${1:Application}.${2:Views}
{
    /// <summary>
    /// Interaction logic for ${3:View}.xaml
    /// </summary>
    public partial class $3 : ${4:Window}
    {
        public $3()
		=> InitializeComponent();
    }
}
endsnippet

snippet prismviewmodel ".cs code for Prism viewmodel" b
using Prism.Mvvm;
using Reactive.Bindings;
using Reactive.Bindings.Extensions;

namespace ${1:Application}.${2:ViewModels}
{
    public class ${3:ViewModel} : BindableBase
    {
        public $3()
		{
			${4:VISUAL}
		}
    }
}
endsnippet

snippet viewcs ".cs code for xaml view" b
using System.Windows;

namespace ${1:Application}.${2:Views}
{
    /// <summary>
    /// Interaction logic for ${3:View}.xaml
    /// </summary>
    public partial class $3 : Window
    {
        public $3() => InitializeComponent();
    }
}
endsnippet

snippet viewcs ".cs code for xaml view" b
using System.Windows.Controls;

namespace ${1:Application}.${2:Views}
{
    /// <summary>
    /// Interaction logic for ${3:View}.xaml
    /// </summary>
    public partial class $3 : UserControl
    {
        public $3() => InitializeComponent();
    }
}
endsnippet

snippet prismmodule "Prism module code" b
using ${1:Module};
using Prism.Ioc;
using Prism.Modularity;
using Prism.Regions;

namespace $1
{
    public class ${2:Module} : IModule
    {
        public void OnInitialized(IContainerProvider containerProvider)
        {
            var regionManager = containerProvider.Resolve<IRegionManager>();
            regionManager.RegisterViewWithRegion("${3:ContentRegion}", typeof(Views.${4:View}));
        }

        public void RegisterTypes(IContainerRegistry containerRegistry) { }
    }
}
endsnippet
