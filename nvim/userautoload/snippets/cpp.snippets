# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet st_default "class snippet with default statements" b
struct ${1:class_name}
{
	constexpr $1() noexcept = default;
	constexpr ~$1() noexcept = default;
	constexpr $1(const $1&) noexcept = default;
	constexpr $1($1&&) noexcept = default;
	constexpr $1& operator=(const $1&) noexcept = default;
	constexpr $1& operator=($1&&) noexcept = default;

	${2:public_members}

private:
	${3:private_members}
};
endsnippet

snippet array_subscripts "array subscripts" b
constexpr const ${1:RESULT}& operator[](${2:PARAM}) const& noexcept
{
	${3:CONTEXT}
}
constexpr $1& operator[]($2) & noexcept
{
	// NOLINTNEXTLINE(cppcoreguidelines-pro-type-const-cast)
	return const_cast<$1&>(( *static_cast<const ${4:CLASS_NAME}*>(this) )[${5:INDEX}]);
}
constexpr $1 operator[]($2) const&& noexcept
{
	return std::move(( *static_cast<const ${4:CLASS_NAME}*>(this) )[${5:INDEX}]);
}
endsnippet
