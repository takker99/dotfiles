# ==== Format ====
# :emoji: Subject
# <PUT ONE BLANK LINE>
# Commit body...



# ==== Emojis ====
# :sparkles:          New Feature
# :+1:                Fixing a feature
# :pencil2:           Fixing Typos
# :bug:               Fixing a Bug
# :rotating_light:    Removing Linter Warnings
#
# :recycle:           Refactoring Code
# :truck:             Moving or Renaming Files
# :fire:              Removing Code or Files
#
# :construction:      WIP (Work In Progress)
# :tada:              Initial Commit
# :bookmark:          Version Tag
# :speech_balloon:    Updating Comments, Text and Literals
# :page_facing_up:    Adding or Updating License
#
# ==== Good Commit Message Examples ====
#
# cf. https://qiita.com/magicant/items/882b5142c4d5064933bc
#
# - Allow login passwords longer than 20 characters (20 文字より長いログインパスワードを認める)
# - Recache password database after changing password (パスワード変更後データベースをキャッシュし直す)
# - Animate thumbnail images when they appear (サムネイル画像が現れる時アニメーションさせる)
# - Trim thumbnail images larger than 200x200 px (200x200 px より大きいサムネイル画像を切り落とす)
#
# ==== The Seven Rules ====
# 1. Separate subject from body with a blank line
# 2. Limit the subject line to 50 characters
# 3. Capitalize the subject line
# 4. Do not end the subject line with a period
# 5. Use the imperative mood in the subject line
# 6. Wrap the body at 72 characters
# 7. Use the body to explain what and why vs. how
#
# How to Write a Git Commit Message http://chris.beams.io/posts/git-commit/
#
# for http://memo.goodpatch.co/2016/07/beautiful-commits-with-emojis/
#
# ====References====
# emojis avairable for GitHub:
#
# - https://gitmoji.carloscuesta.me/
#
# how to commit:
#
# - [クリアなコードの作り方: 意図が伝わるコミットのしかた](https://www.clear-code.com/blog/2012/3/13.html)
